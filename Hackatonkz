import telebot
from telebot import types
from datetime import datetime

# Токен вашего бота
TOKEN = 'YOUR_BOT_TOKEN'
bot = telebot.TeleBot(TOKEN)

# Хранение данных пользователей, команд и мероприятий
teams = {}
users = {}
events = []

# Команда /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Регистрация участника")
    btn2 = types.KeyboardButton("Регистрация команды")
    btn3 = types.KeyboardButton("Список команд и участников")
    btn4 = types.KeyboardButton("Ближайшие мероприятия")
    btn5 = types.KeyboardButton("Добавить мероприятие")
    btn6 = types.KeyboardButton("Помощь и поддержка")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    
    bot.send_message(message.chat.id, 
                     "Привет! Я бот для регистрации команд и участников.\nВыберите действие:", 
                     reply_markup=markup)

# Регистрация участника
@bot.message_handler(func=lambda message: message.text == "Регистрация участника")
def register_user(message):
    msg = bot.send_message(message.chat.id, 'Введите ваше имя:')
    bot.register_next_step_handler(msg, process_user_name)

def process_user_name(message):
    user_id = message.from_user.id
    user_name = message.text
    users[user_id] = {'name': user_name}
    
    msg = bot.send_message(message.chat.id, 'Введите вашу команду:')
    bot.register_next_step_handler(msg, process_user_team)

def process_user_team(message):
    user_id = message.from_user.id
    team_name = message.text
    
    if team_name not in teams:
        teams[team_name] = []
    teams[team_name].append(users[user_id]['name'])
    
    users[user_id]['team'] = team_name
    bot.send_message(message.chat.id, f'Участник {users[user_id]["name"]} зарегистрирован в команду {team_name}')

# Регистрация команды
@bot.message_handler(func=lambda message: message.text == "Регистрация команды")
def register_team(message):
    msg = bot.send_message(message.chat.id, 'Введите название вашей команды:')
    bot.register_next_step_handler(msg, process_team_registration)

def process_team_registration(message):
    team_name = message.text
    if team_name in teams:
        bot.send_message(message.chat.id, f'Команда {team_name} уже существует.')
    else:
        teams[team_name] = []
        bot.send_message(message.chat.id, f'Команда {team_name} успешно зарегистрирована.')

# Показать список команд и участников
@bot.message_handler(func=lambda message: message.text == "Список команд и участников")
def show_teams_and_users(message):
    if teams:
        response = "Список команд и участников:\n"
        for team, members in teams.items():
            response += f"\nКоманда {team}:\n" + "\n".join(members)
    else:
        response = "Пока нет зарегистрированных команд и участников."
    
    bot.send_message(message.chat.id, response)

# Добавление мероприятия
@bot.message_handler(func=lambda message: message.text == "Добавить мероприятие")
def add_event(message):
    msg = bot.send_message(message.chat.id, 'Введите название мероприятия:')
    bot.register_next_step_handler(msg, process_event_name)

def process_event_name(message):
    event_name = message.text
    msg = bot.send_message(message.chat.id, 'Введите дату мероприятия (в формате ГГГГ-ММ-ДД):')
    bot.register_next_step_handler(msg, process_event_date, event_name)

def process_event_date(message, event_name):
    try:
        event_date = datetime.strptime(message.text, '%Y-%m-%d')
        events.append({'name': event_name, 'date': event_date})
        bot.send_message(message.chat.id, f'Мероприятие "{event_name}" добавлено на {event_date.strftime("%Y-%m-%d")}')
    except ValueError:
        bot.send_message(message.chat.id, 'Неверный формат даты. Попробуйте ещё раз.')

# Показать ближайшие мероприятия
@bot.message_handler(func=lambda message: message.text == "Ближайшие мероприятия")
def show_upcoming_events(message):
    if events:
        sorted_events = sorted(events, key=lambda x: x['date'])
        today = datetime.now()
        upcoming_events = [event for event in sorted_events if event['date'] >= today]
        
        if upcoming_events:
            response = "Ближайшие мероприятия:\n"
            for event in upcoming_events[:5]:  # Покажем ближайшие 5 мероприятий
                response += f'{event["name"]} - {event["date"].strftime("%Y-%m-%d")}\n'
        else:
            response = "Нет предстоящих мероприятий."
    else:
        response = "Мероприятия пока не добавлены."

    bot.send_message(message.chat.id, response)

# Поддержка и помощь
@bot.message_handler(func=lambda message: message.text == "Помощь и поддержка")
def support(message):
    support_info = ("Вы можете зарегистрировать команду или участника, "
                    "просмотреть список команд, добавить или узнать о ближайших мероприятиях. "
                    "Если вам нужна помощь, свяжитесь с нами через техподдержку.\n"
                    "Команды:\n"
                    "/start - начать работу с ботом\n"
                    "/help - получить справку")
    bot.send_message(message.chat.id, support_info)

# Команда /help
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = ("Я бот для управления командами и участниками, а также мероприятиями.\n"
                 "Мои команды:\n"
                 "/start - начать работу\n"
                 "Вы также можете выбрать действия из меню.")
    bot.send_message(message.chat.id, help_text)

# Функция обработки текста (общие сообщения)
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.send_message(message.chat.id, "Неизвестная команда. Пожалуйста, выберите действие из меню.")

# Запуск бота
bot.polling(none_stop=True)
